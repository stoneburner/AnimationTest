//
//  TestStyleKit.swift
//  ProjectName
//
//  Created by Alexander Kasimir on 28.07.19.
//  Copyright Â© 2019 Alexander Kasimir. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TestStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let color: UIColor = UIColor(red: 0.241, green: 0.827, blue: 0.326, alpha: 1.000)
        static let shadow: NSShadow = NSShadow(color: UIColor.black, offset: CGSize(width: 3, height: 3), blurRadius: 5)
    }

    //// Colors

    @objc dynamic public class var color: UIColor { return Cache.color }

    //// Shadows

    @objc dynamic public class var shadow: NSShadow { return Cache.shadow }

    //// Drawing Methods

    @objc dynamic public class func drawProgressDisplay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 140), resizing: ResizingBehavior = .aspectFit, progress: CGFloat = 0.127) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 140), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 140)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 140, resizedFrame.height / 140)



        //// Variable Declarations
        let progressEndAngle: CGFloat = progress == 1 ? 0.001 : 360 * (1 - progress)

        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: 70, y: 70)
        context.rotate(by: -90 * CGFloat.pi/180)

        let ovalRect = CGRect(x: -60, y: -60, width: 120, height: 120)
        let ovalPath = UIBezierPath()
        ovalPath.addArc(withCenter: CGPoint(x: ovalRect.midX, y: ovalRect.midY), radius: ovalRect.width / 2, startAngle: 0 * CGFloat.pi/180, endAngle: -progressEndAngle * CGFloat.pi/180, clockwise: true)

        context.saveGState()
        context.setShadow(offset: CGSize(width: TestStyleKit.shadow.shadowOffset.width * resizedShadowScale, height: TestStyleKit.shadow.shadowOffset.height * resizedShadowScale), blur: TestStyleKit.shadow.shadowBlurRadius * resizedShadowScale, color: (TestStyleKit.shadow.shadowColor as! UIColor).cgColor)
        TestStyleKit.color.setStroke()
        ovalPath.lineWidth = 10
        ovalPath.lineCapStyle = .round
        ovalPath.stroke()
        context.restoreGState()

        context.restoreGState()


        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 49.21, y: 77.84))
        starPath.addLine(to: CGPoint(x: 57.01, y: 66.93))
        starPath.addLine(to: CGPoint(x: 56.17, y: 53.54))
        starPath.addLine(to: CGPoint(x: 68.96, y: 57.59))
        starPath.addLine(to: CGPoint(x: 81.43, y: 52.66))
        starPath.addLine(to: CGPoint(x: 81.53, y: 66.07))
        starPath.addLine(to: CGPoint(x: 90.08, y: 76.41))
        starPath.addLine(to: CGPoint(x: 77.35, y: 80.65))
        starPath.addLine(to: CGPoint(x: 70.16, y: 91.97))
        starPath.addLine(to: CGPoint(x: 62.2, y: 81.18))
        starPath.addLine(to: CGPoint(x: 49.21, y: 77.84))
        starPath.close()
        TestStyleKit.color.setFill()
        starPath.fill()
        
        context.restoreGState()

    }




    @objc(TestStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension NSShadow {
    convenience init(color: AnyObject!, offset: CGSize, blurRadius: CGFloat) {
        self.init()
        self.shadowColor = color
        self.shadowOffset = offset
        self.shadowBlurRadius = blurRadius
    }
}
